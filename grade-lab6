#!/usr/bin/env python

from gradelib import *

r = Runner(save('jos.out'),
           stop_breakpoint('readline'))

@test(0, 'running OpenLSD')
def test_jos():
    r.run_qemu()

@test(10)
def test_yield():
    r.user_test('yield')
    r.match('.PID     1. Hello!',
            '.PID     1. I am back! This is round 1',
            '.PID     1. I am back! This is round 2',
            '.PID     1. I am back! This is round 3',
            '.PID     1. I am back! This is round 4',
            '.PID     1. I am back! This is round 5',
            '.PID     1. I am done! Good bye!',
            '.PID     1. Exiting gracefully',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_waitnone():
    r.user_test('waitnone')
    r.match('.PID     1. Exiting gracefully',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_waitself():
    r.user_test('waitself')
    r.match('.PID     1. Exiting gracefully',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_basicfork():
    r.user_test('basicfork')
    r.match('.PID     1. New task with PID 2',
            '.PID     2. I am the child!',
            '.PID     1. I am the parent!',
            '.PID     1. Exiting gracefully',
            '.PID     .. Freed task with PID 2',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_cowfork():
    r.user_test('cowfork')
    r.match('.PID     1. New task with PID 2',
            '.PID     2. I am the child!',
            '.PID     1. I am the parent!',
            '.PID     1. Exiting gracefully',
            '.PID     .. Freed task with PID 2',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_reaper():
    r.user_test('reaper')
    r.match('.PID     1. New task with PID 2',
            '.PID     2. I am the child!',
            '.PID     1. I am the parent!',
            '.PID     .. Freed task with PID 2',
            '.PID     1. Exiting gracefully',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_wait():
    r.user_test('wait')
    r.match('.PID     1. New task with PID 2',
            '.PID     2. I am the child!',
            '.PID     2. Back again!',
            '.PID     2. Back again!',
            '.PID     2. Back again!',
            '.PID     2. Back again!',
            '.PID     2. Back again!',
            '.PID     .. Freed task with PID 2',
            '.PID     1. I am the parent!',
            '.PID     1. Exiting gracefully',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_evilchild():
    r.user_test('evilchild')
    r.match('.PID     1. New task with PID 2',
            '.PID     2. I am the child!',
            '.PID     1. Reaping task with PID 2',
            '.PID     1. Freed task with PID 2',
            '.PID     1. I am the parent!',
            '.PID     1. Exiting gracefully',
            '.PID     1. Freed task with PID 1',
            'Destroyed the only task - nothing more to do!')

@test(10)
def test_mcorefork():
    r.user_test('mcorefork')
    r.match('.PID ...... Running on CPU 0')
    r.match('.PID ...... Running on CPU 1')

run_tests()

